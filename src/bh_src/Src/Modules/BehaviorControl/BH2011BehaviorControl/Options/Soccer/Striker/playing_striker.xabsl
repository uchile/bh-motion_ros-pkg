/** A test striker in BH2011 without common decision */
option playing_striker
{
  initial state start
  {
    decision
    {
      if(state_time > 1000)
        goto turn_to_ball;
      else
        stay;
    }
    action
    {
      motion.type = stand;
      head.control_mode = look_up;
    }
  }

  state turn_to_ball
  {
    decision
    {
      if(ball.time_since_last_seen > 7000)
        goto search_for_ball;
      else if(abs( value = ball.angle ) < 5)
        goto walk_to_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 0;
      motion.walk_target.y = 0;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 50;
      head.control_mode = look_up_and_down;
      
    }
  }

  state walk_to_ball
  {
    decision
    {
      if(ball.time_since_last_seen > 7000)
        goto search_for_ball;
      /*else if(obstacle.distance_to_closest_center_left < 500)
        goto call_dodge_left;
      else if(obstacle.distance_to_closest_center_right < 500)
        goto call_dodge_right;
      //else if(obstacle.distance_to_closest_center < 250)
      //  goto call_dodge;
      /*else if(obstacle.arm_left)
        goto call_contact_dodge_left;
      else if(obstacle.arm_right)
        goto call_contact_dodge_right;
      else if(ball.distance < 500)
        goto align_to_goal;*/
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = ball.seen.x;
      motion.walk_target.y = ball.seen.y;
      motion.walk_target.rot = ball.seen.angle * 2.0;
      motion.walk_speed = 40;
      head.control_mode = look_at_ball;
    }
  }

  /*state call_dodge
  {
    decision
    {
      if(obstacle.distance_to_closest_center > 600)
        goto walk_to_ball;
      else if(state_time > 4000)
        goto walk_to_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = -150;
      motion.walk_target.y = - 150;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 100;
      head.control_mode = look_at_ball;
    }
  }

  state call_dodge_left
  {
    decision
    {
      /*if(obstacle.angle_to_closest > 100)
        goto walk_to_ball;
      else if (obstacle.angle_to_closest < 0)
        goto call_dodge_right;*
      if (state_time > 3000)
        goto walk_to_ball;
      else if (state_time > 4000)
        goto search_for_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 10;
      motion.walk_target.y = -500;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 100;
      head.control_mode = look_at_ball;
    }
  }
    
state call_dodge_right
  {
    decision
    {
      /*if(obstacle.angle_to_closest < -100)
        goto walk_to_ball;
      else if (obstacle.angle_to_closest > 0)
        goto call_dodge_left;
      if (state_time > 3000)
        goto walk_to_ball;
      else if (state_time > 4000)
        goto search_for_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 10;
      motion.walk_target.y = 500;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 100;
      head.control_mode = look_at_ball;
    }
  }
 /* state call_contact_dodge_right
  {
    decision
    {
      if(!obstacle.arm_right && state_time > 1000)
        goto  search_for_ball;
      else
        stay;
    }
    action
    {
    motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 0;
      motion.walk_target.y = 250;
      motion.walk_target.rot = ball.angle;
      motion.walk_speed = 100;
      head.control_mode = state_time % 4000 < 2000 ? look_up_and_down : look_at_ball;
    }
  }
  state call_contact_dodge_left
  {
    decision
    {
      if(!obstacle.arm_left && state_time >1000)
        goto search_for_ball;
      else
        stay;
    }
    action
    {
    motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 0;
      motion.walk_target.y = -250;
      motion.walk_target.rot = ball.angle;
      motion.walk_speed = 100;
      head.control_mode = state_time % 4000 < 2000 ? look_up_and_down : look_at_ball;
    }
  }
  state align_to_goal
  {
    decision
    {
      if(ball.seen.distance > 500)
        goto walk_to_ball;
      else if(ball.time_since_last_seen > 7000)
        goto search_for_ball;
      else if(abs( value = ball.seen.angle ) < 10 && abs( value = ball.seen.y ) < 100)
        goto align_behind_ball;
      else if(obstacle.distance_to_closest_center < 80)
        goto call_dodge_aux;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = ball.seen.x - 400;
      motion.walk_target.y = ball.seen.y;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 40;
      head.control_mode = look_at_ball;
      
    }
  }

  state call_dodge_aux
  {
    decision
    {
      if(obstacle.distance_to_closest > 80)
        goto search_for_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = -150;
      motion.walk_target.y = - 150;
      motion.walk_target.rot = ball.seen.angle;
      motion.walk_speed = 100;
      head.control_mode = look_at_ball;
    }
  }
  state align_behind_ball
  {
    decision
    {
      if(ball.seen.distance > 500)
        goto walk_to_ball;
      else if(ball.time_since_last_seen > 7000)
        goto search_for_ball;
      else if(between( value = ball.seen.y, min = 20, max = 50 ) && between( value = ball.seen.x, min = 140, max = 170 ))
        goto kick;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = ball.seen.x - 160;
      motion.walk_target.y = ball.seen.y - 30;
      motion.walk_target.rot = 0;
      motion.walk_speed = 40;
      head.control_mode = look_at_ball;
      
    }
  }

  /*state check_pose
  {
    decision
    {
      if(ball.time_since_last_seen > 7000)
        goto search_for_ball;
      else if(state_time > 2000 && (opponent_goal.was_seen || state_time > 5000) && abs( value = opponent_goal.free_part.angle_to_center ) < 2)
      	goto kick;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = ball.x - 150;
      motion.walk_target.y = ball.y - 30;
      motion.walk_target.rot = opponent_goal.free_part.angle_to_center;
      motion.walk_speed = 50;
      head.control_mode = look_up_and_down;
      
    }
  }*/

  state search_for_ball
  {
    decision
    {
      if(ball.was_seen)
        goto turn_to_ball;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      walkKick.type = none;
      motion.walk_target.x = 0;
      motion.walk_target.y = 0;
      motion.walk_target.rot = ball.y < 0 ? -180 : 180;
      motion.walk_speed = 50;
      head.control_mode = look_up_and_down;
      
    }
  }

  /*state prepare_kick
  {
    decision
    {
      if(motion.kick_forward( x = ball.x, y = ball.y, mirror = false, updates = true))
        goto kick;
      else
        stay;
    }
    action
    {
      motion.type = stand;
      motion.bike.mirror = true;
    }
  }*/

  /*state kick
  {
    decision
    {
      if(state_time > 2500)
        goto start;
      else
        stay;
    }
    action
    {
      motion.type = walk;
      motion.walk_target.x = 0;
      motion.walk_target.y = 0;
      motion.walk_target.rot = opponent_goal.free_part.angle_to_center;
      motion.walk_speed = 20;
      walkKick.type = left;
      kickBallPosition.x = ball.seen.x;
      kickBallPosition.y = ball.seen.y;
      kickTarget.x = 1;
      kickTarget.y = 0;
    }
  }*/
}
