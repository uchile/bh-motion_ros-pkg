"""autogenerated by genpy from bh_motion/HeadJointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HeadJointRequest(genpy.Message):
  _md5sum = "2d0f0dc115d2a8418510aacc3b1bbe1a"
  _type = "bh_motion/HeadJointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 tilt       # Head tilt target angle in radians. 
float32 pan        #  Head pan target angle in radians. 

bool reachable   #  Whether the head motion request points on a reachable position. 
bool moving   #  Whether the head is currently in motion or not. 






"""
  __slots__ = ['tilt','pan','reachable','moving']
  _slot_types = ['float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tilt,pan,reachable,moving

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HeadJointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tilt is None:
        self.tilt = 0.
      if self.pan is None:
        self.pan = 0.
      if self.reachable is None:
        self.reachable = False
      if self.moving is None:
        self.moving = False
    else:
      self.tilt = 0.
      self.pan = 0.
      self.reachable = False
      self.moving = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f2B.pack(_x.tilt, _x.pan, _x.reachable, _x.moving))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.tilt, _x.pan, _x.reachable, _x.moving,) = _struct_2f2B.unpack(str[start:end])
      self.reachable = bool(self.reachable)
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f2B.pack(_x.tilt, _x.pan, _x.reachable, _x.moving))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.tilt, _x.pan, _x.reachable, _x.moving,) = _struct_2f2B.unpack(str[start:end])
      self.reachable = bool(self.reachable)
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f2B = struct.Struct("<2f2B")
