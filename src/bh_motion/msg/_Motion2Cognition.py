"""autogenerated by genpy from bh_motion/Motion2Cognition.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class Motion2Cognition(genpy.Message):
  _md5sum = "8533cf41d8c96987a2186529cd5d6b96"
  _type = "bh_motion/Motion2Cognition"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """BikeEngineOutput bikeEngineOutput
CognitionFrameInfo cognitionFrameInfo
FallDownState fallDownState
JointData filteredJointData    #en verdad es un jointData
JointData filteredJointDataPrev #tambien
SensorData filteredSensorData #SensorData
GroundContactState groundContactState
HeadJointRequest headJointRequest
JointRequest jointRequest
KeyStates keyStates
MotionInfo motionInfo
MotionRobotHealth motionRobotHealth
OdometryData odometryData
RobotModel robotModel
TorsoMatrix torsoMatrix

uint64 cont

# //Shared MotionToCognition representations

================================================================================
MSG: bh_motion/BikeEngineOutput
Pose2D odometryOffset   # /**< The body motion performed in this step. */
bool isLeavingPossible   # /**< Is leaving the motion module possible now? */
BikeRequest executedBikeRequest  # /**< The bike request that is currently in execution. */

================================================================================
MSG: bh_motion/Pose2D
# This expresses a position and orientation on a 2D (rotation, transaltion.x, transation.y).

float32 rotation
Translation translation

================================================================================
MSG: bh_motion/Translation
# This expresses an x, y translation

float32 x
float32 y

================================================================================
MSG: bh_motion/BikeRequest
bool mirror
bool dynamical
bool ballSpecial
uint8 bMotionType   # ENUM(BMotionID: kickForward, newKick, none)


DynPoint[2] dynPoints


================================================================================
MSG: bh_motion/DynPoint
uint32 limb
uint32 phaseNumber
uint32 duration
Vector3 translation
Vector3 angle
Vector3 odometryOffset

================================================================================
MSG: bh_motion/Vector3
float32 x 
float32 y
float32 z

================================================================================
MSG: bh_motion/CognitionFrameInfo
uint64 time   # /**< The time stamp of the data processed in the current frame in ms. */
float32 cycleTime  # /**< Length of one cycle in seconds. */

================================================================================
MSG: bh_motion/FallDownState
#/** Current state of the robot's body. */
uint8 state #  ENUM(State: undefined, upright, onGround, staggering, falling);

#/** The robot is falling / fell into this direction. */
uint8 direction  # ENUM(Direction: none, front, left, back, right );

#/** Did the robot fell sidewards before? */
uint8 sidewards #ENUM(Sidestate: noot, /* since "not" is already a keyword...*/, leftwards, rightwards, fallen /* robot did not get up since last sideward fall */);

float32 odometryRotationOffset

================================================================================
MSG: bh_motion/JointData
uint8[22] angles #numOfJoints
uint32 timeStamp
float32 cycleTime

================================================================================
MSG: bh_motion/SensorData
float32[19] data #numOfSensors
int16[22] currents #numOfJoints
uint8[22] temperatures #numOfJoints
uint32 timeStamp
uint32 usActuatorMode
uint32 usTimeStamp

================================================================================
MSG: bh_motion/GroundContactState
bool contactSafe   # /**< Whether we got contact with ground or not. */
bool contact
bool noContactSafe  # /** Whether we got no contact with ground or not */

================================================================================
MSG: bh_motion/HeadJointRequest
float32 tilt       # Head tilt target angle in radians. 
float32 pan        #  Head pan target angle in radians. 

bool reachable   #  Whether the head motion request points on a reachable position. 
bool moving   #  Whether the head is currently in motion or not. 






================================================================================
MSG: bh_motion/JointRequest
JointData jointData
HardnessData jointHardness

================================================================================
MSG: bh_motion/HardnessData
int32[22] hardness #numOfJoints

================================================================================
MSG: bh_motion/KeyStates
#ENUM(Key: rightFootRight, rightFootLeft, leftFootRight, leftFootLeft, chest);


bool[5] pressed

================================================================================
MSG: bh_motion/MotionInfo
#class MotionInfo : public MotionRequest

MotionRequest motionRequest
bool isMotionStable   #/**< If true, the motion is stable, leading to a valid torso / camera matrix. */
Pose2D upcomingOdometryOffset   # /**< The remaining odometry offset for the currently executed motion. */
bool upcomingOdometryOffsetValid   # /**< Whether the \c upcomingOdometryOffset is precise enough to be used */


================================================================================
MSG: bh_motion/MotionRequest
# This expresses a Motion request.

uint8 motion  # /**< The selected motion. ENUM(Motion: walk, bike, specialAction, stand);*/

SpecialActionRequest specialActionRequest # /**< The special action request, if it is the selected motion. */
WalkRequest walkRequest  # /**< The walk request, if it is the selected motion. */
BikeRequest bikeRequest  # /**< The kick request, if it is the selected motion. */


================================================================================
MSG: bh_motion/SpecialActionRequest
# This expresses a special action requests.

# ENUM(SpecialActionID: playDead, standUpBackNao, standUpFrontNao, sitDown, sitDownKeeper, goUp, keeperJumpLeftSign);

uint8 specialAction  #; /**< The special action selected. */
bool mirror          #; /**< Mirror left and right. */


# FALTA getSpecialActionFromName

================================================================================
MSG: bh_motion/WalkRequest
# This expresses a walk request.


#(ENUM(Mode: speedMode, /**< Interpret \c speed as absolute walking speed and ignore \c target. */
#    percentageSpeedMode, /**< Interpret \c speed as percentage walking speed and ignore \c target. */
#    targetMode /**< Use \c target as walking target relative to the current position of the robot and interpret \c speed as percentage walking speed. */);)

uint32 mode  #/**< The walking mode. */
Pose2D speed #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
Pose2D target #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
bool pedantic #/**< Allows to disable the step size stabilization. set it when precision is indispensable. */
bool dribbling

uint32 kickType
Vector2 kickBallPosition
Vector2 kickTarget

================================================================================
MSG: bh_motion/Vector2
float32 x 
float32 y


================================================================================
MSG: bh_motion/MotionRobotHealth
float32 motionFrameRate

================================================================================
MSG: bh_motion/OdometryData
Pose2D pose2D

================================================================================
MSG: bh_motion/RobotModel
Pose3D[23] limbs #/**< Coordinate frame of the limbs of the robot relative to the robot's origin. */
Vector3 centerOfMass # /**< Position of the center of mass (center of gravity) relative to the robot's origin. 
float32 totalMass  # /**< The mass of the robot. */


================================================================================
MSG: bh_motion/Pose3D
RotationMatrix rotation

#/** translation as a Vector3*/
Vector3 translation

================================================================================
MSG: bh_motion/RotationMatrix
#  * \param  c0  the first column of the matrix.
#  * \param  c1  the second column of the matrix.
#  * \param  c2  the third column of the matrix.

Vector3 c0
Vector3 c1
Vector3 c2



================================================================================
MSG: bh_motion/TorsoMatrix
Pose3D offset   # /**< The estimated offset (including odometry) from last torso matrix to this one. (relative to the torso) */
bool isValid

"""
  __slots__ = ['bikeEngineOutput','cognitionFrameInfo','fallDownState','filteredJointData','filteredJointDataPrev','filteredSensorData','groundContactState','headJointRequest','jointRequest','keyStates','motionInfo','motionRobotHealth','odometryData','robotModel','torsoMatrix','cont']
  _slot_types = ['bh_motion/BikeEngineOutput','bh_motion/CognitionFrameInfo','bh_motion/FallDownState','bh_motion/JointData','bh_motion/JointData','bh_motion/SensorData','bh_motion/GroundContactState','bh_motion/HeadJointRequest','bh_motion/JointRequest','bh_motion/KeyStates','bh_motion/MotionInfo','bh_motion/MotionRobotHealth','bh_motion/OdometryData','bh_motion/RobotModel','bh_motion/TorsoMatrix','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bikeEngineOutput,cognitionFrameInfo,fallDownState,filteredJointData,filteredJointDataPrev,filteredSensorData,groundContactState,headJointRequest,jointRequest,keyStates,motionInfo,motionRobotHealth,odometryData,robotModel,torsoMatrix,cont

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motion2Cognition, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bikeEngineOutput is None:
        self.bikeEngineOutput = bh_motion.msg.BikeEngineOutput()
      if self.cognitionFrameInfo is None:
        self.cognitionFrameInfo = bh_motion.msg.CognitionFrameInfo()
      if self.fallDownState is None:
        self.fallDownState = bh_motion.msg.FallDownState()
      if self.filteredJointData is None:
        self.filteredJointData = bh_motion.msg.JointData()
      if self.filteredJointDataPrev is None:
        self.filteredJointDataPrev = bh_motion.msg.JointData()
      if self.filteredSensorData is None:
        self.filteredSensorData = bh_motion.msg.SensorData()
      if self.groundContactState is None:
        self.groundContactState = bh_motion.msg.GroundContactState()
      if self.headJointRequest is None:
        self.headJointRequest = bh_motion.msg.HeadJointRequest()
      if self.jointRequest is None:
        self.jointRequest = bh_motion.msg.JointRequest()
      if self.keyStates is None:
        self.keyStates = bh_motion.msg.KeyStates()
      if self.motionInfo is None:
        self.motionInfo = bh_motion.msg.MotionInfo()
      if self.motionRobotHealth is None:
        self.motionRobotHealth = bh_motion.msg.MotionRobotHealth()
      if self.odometryData is None:
        self.odometryData = bh_motion.msg.OdometryData()
      if self.robotModel is None:
        self.robotModel = bh_motion.msg.RobotModel()
      if self.torsoMatrix is None:
        self.torsoMatrix = bh_motion.msg.TorsoMatrix()
      if self.cont is None:
        self.cont = 0
    else:
      self.bikeEngineOutput = bh_motion.msg.BikeEngineOutput()
      self.cognitionFrameInfo = bh_motion.msg.CognitionFrameInfo()
      self.fallDownState = bh_motion.msg.FallDownState()
      self.filteredJointData = bh_motion.msg.JointData()
      self.filteredJointDataPrev = bh_motion.msg.JointData()
      self.filteredSensorData = bh_motion.msg.SensorData()
      self.groundContactState = bh_motion.msg.GroundContactState()
      self.headJointRequest = bh_motion.msg.HeadJointRequest()
      self.jointRequest = bh_motion.msg.JointRequest()
      self.keyStates = bh_motion.msg.KeyStates()
      self.motionInfo = bh_motion.msg.MotionInfo()
      self.motionRobotHealth = bh_motion.msg.MotionRobotHealth()
      self.odometryData = bh_motion.msg.OdometryData()
      self.robotModel = bh_motion.msg.RobotModel()
      self.torsoMatrix = bh_motion.msg.TorsoMatrix()
      self.cont = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f5B.pack(_x.bikeEngineOutput.odometryOffset.rotation, _x.bikeEngineOutput.odometryOffset.translation.x, _x.bikeEngineOutput.odometryOffset.translation.y, _x.bikeEngineOutput.isLeavingPossible, _x.bikeEngineOutput.executedBikeRequest.mirror, _x.bikeEngineOutput.executedBikeRequest.dynamical, _x.bikeEngineOutput.executedBikeRequest.ballSpecial, _x.bikeEngineOutput.executedBikeRequest.bMotionType))
      for val1 in self.bikeEngineOutput.executedBikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v2 = val1.angle
        _x = _v2
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v3 = val1.odometryOffset
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_Qf3Bf.pack(_x.cognitionFrameInfo.time, _x.cognitionFrameInfo.cycleTime, _x.fallDownState.state, _x.fallDownState.direction, _x.fallDownState.sidewards, _x.fallDownState.odometryRotationOffset))
      _x = self.filteredJointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.filteredJointData.timeStamp, _x.filteredJointData.cycleTime))
      _x = self.filteredJointDataPrev.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.filteredJointDataPrev.timeStamp, _x.filteredJointDataPrev.cycleTime))
      buff.write(_struct_19f.pack(*self.filteredSensorData.data))
      buff.write(_struct_22h.pack(*self.filteredSensorData.currents))
      _x = self.filteredSensorData.temperatures
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_3I3B2f2B.pack(_x.filteredSensorData.timeStamp, _x.filteredSensorData.usActuatorMode, _x.filteredSensorData.usTimeStamp, _x.groundContactState.contactSafe, _x.groundContactState.contact, _x.groundContactState.noContactSafe, _x.headJointRequest.tilt, _x.headJointRequest.pan, _x.headJointRequest.reachable, _x.headJointRequest.moving))
      _x = self.jointRequest.jointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.jointRequest.jointData.timeStamp, _x.jointRequest.jointData.cycleTime))
      buff.write(_struct_22i.pack(*self.jointRequest.jointHardness.hardness))
      buff.write(_struct_5B.pack(*self.keyStates.pressed))
      _x = self
      buff.write(_struct_3BI6f2BI4f4B.pack(_x.motionInfo.motionRequest.motion, _x.motionInfo.motionRequest.specialActionRequest.specialAction, _x.motionInfo.motionRequest.specialActionRequest.mirror, _x.motionInfo.motionRequest.walkRequest.mode, _x.motionInfo.motionRequest.walkRequest.speed.rotation, _x.motionInfo.motionRequest.walkRequest.speed.translation.x, _x.motionInfo.motionRequest.walkRequest.speed.translation.y, _x.motionInfo.motionRequest.walkRequest.target.rotation, _x.motionInfo.motionRequest.walkRequest.target.translation.x, _x.motionInfo.motionRequest.walkRequest.target.translation.y, _x.motionInfo.motionRequest.walkRequest.pedantic, _x.motionInfo.motionRequest.walkRequest.dribbling, _x.motionInfo.motionRequest.walkRequest.kickType, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.x, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.y, _x.motionInfo.motionRequest.walkRequest.kickTarget.x, _x.motionInfo.motionRequest.walkRequest.kickTarget.y, _x.motionInfo.motionRequest.bikeRequest.mirror, _x.motionInfo.motionRequest.bikeRequest.dynamical, _x.motionInfo.motionRequest.bikeRequest.ballSpecial, _x.motionInfo.motionRequest.bikeRequest.bMotionType))
      for val1 in self.motionInfo.motionRequest.bikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v4 = val1.translation
        _x = _v4
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v5 = val1.angle
        _x = _v5
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v6 = val1.odometryOffset
        _x = _v6
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_B3fB4f.pack(_x.motionInfo.isMotionStable, _x.motionInfo.upcomingOdometryOffset.rotation, _x.motionInfo.upcomingOdometryOffset.translation.x, _x.motionInfo.upcomingOdometryOffset.translation.y, _x.motionInfo.upcomingOdometryOffsetValid, _x.motionRobotHealth.motionFrameRate, _x.odometryData.pose2D.rotation, _x.odometryData.pose2D.translation.x, _x.odometryData.pose2D.translation.y))
      for val1 in self.robotModel.limbs:
        _v7 = val1.rotation
        _v8 = _v7.c0
        _x = _v8
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.c1
        _x = _v9
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v10 = _v7.c2
        _x = _v10
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v11 = val1.translation
        _x = _v11
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_16fBQ.pack(_x.robotModel.centerOfMass.x, _x.robotModel.centerOfMass.y, _x.robotModel.centerOfMass.z, _x.robotModel.totalMass, _x.torsoMatrix.offset.rotation.c0.x, _x.torsoMatrix.offset.rotation.c0.y, _x.torsoMatrix.offset.rotation.c0.z, _x.torsoMatrix.offset.rotation.c1.x, _x.torsoMatrix.offset.rotation.c1.y, _x.torsoMatrix.offset.rotation.c1.z, _x.torsoMatrix.offset.rotation.c2.x, _x.torsoMatrix.offset.rotation.c2.y, _x.torsoMatrix.offset.rotation.c2.z, _x.torsoMatrix.offset.translation.x, _x.torsoMatrix.offset.translation.y, _x.torsoMatrix.offset.translation.z, _x.torsoMatrix.isValid, _x.cont))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bikeEngineOutput is None:
        self.bikeEngineOutput = bh_motion.msg.BikeEngineOutput()
      if self.cognitionFrameInfo is None:
        self.cognitionFrameInfo = bh_motion.msg.CognitionFrameInfo()
      if self.fallDownState is None:
        self.fallDownState = bh_motion.msg.FallDownState()
      if self.filteredJointData is None:
        self.filteredJointData = bh_motion.msg.JointData()
      if self.filteredJointDataPrev is None:
        self.filteredJointDataPrev = bh_motion.msg.JointData()
      if self.filteredSensorData is None:
        self.filteredSensorData = bh_motion.msg.SensorData()
      if self.groundContactState is None:
        self.groundContactState = bh_motion.msg.GroundContactState()
      if self.headJointRequest is None:
        self.headJointRequest = bh_motion.msg.HeadJointRequest()
      if self.jointRequest is None:
        self.jointRequest = bh_motion.msg.JointRequest()
      if self.keyStates is None:
        self.keyStates = bh_motion.msg.KeyStates()
      if self.motionInfo is None:
        self.motionInfo = bh_motion.msg.MotionInfo()
      if self.motionRobotHealth is None:
        self.motionRobotHealth = bh_motion.msg.MotionRobotHealth()
      if self.odometryData is None:
        self.odometryData = bh_motion.msg.OdometryData()
      if self.robotModel is None:
        self.robotModel = bh_motion.msg.RobotModel()
      if self.torsoMatrix is None:
        self.torsoMatrix = bh_motion.msg.TorsoMatrix()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bikeEngineOutput.odometryOffset.rotation, _x.bikeEngineOutput.odometryOffset.translation.x, _x.bikeEngineOutput.odometryOffset.translation.y, _x.bikeEngineOutput.isLeavingPossible, _x.bikeEngineOutput.executedBikeRequest.mirror, _x.bikeEngineOutput.executedBikeRequest.dynamical, _x.bikeEngineOutput.executedBikeRequest.ballSpecial, _x.bikeEngineOutput.executedBikeRequest.bMotionType,) = _struct_3f5B.unpack(str[start:end])
      self.bikeEngineOutput.isLeavingPossible = bool(self.bikeEngineOutput.isLeavingPossible)
      self.bikeEngineOutput.executedBikeRequest.mirror = bool(self.bikeEngineOutput.executedBikeRequest.mirror)
      self.bikeEngineOutput.executedBikeRequest.dynamical = bool(self.bikeEngineOutput.executedBikeRequest.dynamical)
      self.bikeEngineOutput.executedBikeRequest.ballSpecial = bool(self.bikeEngineOutput.executedBikeRequest.ballSpecial)
      self.bikeEngineOutput.executedBikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v12 = val1.translation
        _x = _v12
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v13 = val1.angle
        _x = _v13
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v14 = val1.odometryOffset
        _x = _v14
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.bikeEngineOutput.executedBikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 19
      (_x.cognitionFrameInfo.time, _x.cognitionFrameInfo.cycleTime, _x.fallDownState.state, _x.fallDownState.direction, _x.fallDownState.sidewards, _x.fallDownState.odometryRotationOffset,) = _struct_Qf3Bf.unpack(str[start:end])
      start = end
      end += 22
      self.filteredJointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filteredJointData.timeStamp, _x.filteredJointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 22
      self.filteredJointDataPrev.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filteredJointDataPrev.timeStamp, _x.filteredJointDataPrev.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 76
      self.filteredSensorData.data = _struct_19f.unpack(str[start:end])
      start = end
      end += 44
      self.filteredSensorData.currents = _struct_22h.unpack(str[start:end])
      start = end
      end += 22
      self.filteredSensorData.temperatures = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.filteredSensorData.timeStamp, _x.filteredSensorData.usActuatorMode, _x.filteredSensorData.usTimeStamp, _x.groundContactState.contactSafe, _x.groundContactState.contact, _x.groundContactState.noContactSafe, _x.headJointRequest.tilt, _x.headJointRequest.pan, _x.headJointRequest.reachable, _x.headJointRequest.moving,) = _struct_3I3B2f2B.unpack(str[start:end])
      self.groundContactState.contactSafe = bool(self.groundContactState.contactSafe)
      self.groundContactState.contact = bool(self.groundContactState.contact)
      self.groundContactState.noContactSafe = bool(self.groundContactState.noContactSafe)
      self.headJointRequest.reachable = bool(self.headJointRequest.reachable)
      self.headJointRequest.moving = bool(self.headJointRequest.moving)
      start = end
      end += 22
      self.jointRequest.jointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.jointRequest.jointData.timeStamp, _x.jointRequest.jointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 88
      self.jointRequest.jointHardness.hardness = _struct_22i.unpack(str[start:end])
      start = end
      end += 5
      self.keyStates.pressed = _struct_5B.unpack(str[start:end])
      self.keyStates.pressed = map(bool, self.keyStates.pressed)
      _x = self
      start = end
      end += 57
      (_x.motionInfo.motionRequest.motion, _x.motionInfo.motionRequest.specialActionRequest.specialAction, _x.motionInfo.motionRequest.specialActionRequest.mirror, _x.motionInfo.motionRequest.walkRequest.mode, _x.motionInfo.motionRequest.walkRequest.speed.rotation, _x.motionInfo.motionRequest.walkRequest.speed.translation.x, _x.motionInfo.motionRequest.walkRequest.speed.translation.y, _x.motionInfo.motionRequest.walkRequest.target.rotation, _x.motionInfo.motionRequest.walkRequest.target.translation.x, _x.motionInfo.motionRequest.walkRequest.target.translation.y, _x.motionInfo.motionRequest.walkRequest.pedantic, _x.motionInfo.motionRequest.walkRequest.dribbling, _x.motionInfo.motionRequest.walkRequest.kickType, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.x, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.y, _x.motionInfo.motionRequest.walkRequest.kickTarget.x, _x.motionInfo.motionRequest.walkRequest.kickTarget.y, _x.motionInfo.motionRequest.bikeRequest.mirror, _x.motionInfo.motionRequest.bikeRequest.dynamical, _x.motionInfo.motionRequest.bikeRequest.ballSpecial, _x.motionInfo.motionRequest.bikeRequest.bMotionType,) = _struct_3BI6f2BI4f4B.unpack(str[start:end])
      self.motionInfo.motionRequest.specialActionRequest.mirror = bool(self.motionInfo.motionRequest.specialActionRequest.mirror)
      self.motionInfo.motionRequest.walkRequest.pedantic = bool(self.motionInfo.motionRequest.walkRequest.pedantic)
      self.motionInfo.motionRequest.walkRequest.dribbling = bool(self.motionInfo.motionRequest.walkRequest.dribbling)
      self.motionInfo.motionRequest.bikeRequest.mirror = bool(self.motionInfo.motionRequest.bikeRequest.mirror)
      self.motionInfo.motionRequest.bikeRequest.dynamical = bool(self.motionInfo.motionRequest.bikeRequest.dynamical)
      self.motionInfo.motionRequest.bikeRequest.ballSpecial = bool(self.motionInfo.motionRequest.bikeRequest.ballSpecial)
      self.motionInfo.motionRequest.bikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v15 = val1.translation
        _x = _v15
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v16 = val1.angle
        _x = _v16
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v17 = val1.odometryOffset
        _x = _v17
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.motionInfo.motionRequest.bikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 30
      (_x.motionInfo.isMotionStable, _x.motionInfo.upcomingOdometryOffset.rotation, _x.motionInfo.upcomingOdometryOffset.translation.x, _x.motionInfo.upcomingOdometryOffset.translation.y, _x.motionInfo.upcomingOdometryOffsetValid, _x.motionRobotHealth.motionFrameRate, _x.odometryData.pose2D.rotation, _x.odometryData.pose2D.translation.x, _x.odometryData.pose2D.translation.y,) = _struct_B3fB4f.unpack(str[start:end])
      self.motionInfo.isMotionStable = bool(self.motionInfo.isMotionStable)
      self.motionInfo.upcomingOdometryOffsetValid = bool(self.motionInfo.upcomingOdometryOffsetValid)
      self.robotModel.limbs = []
      for i in range(0, 23):
        val1 = bh_motion.msg.Pose3D()
        _v18 = val1.rotation
        _v19 = _v18.c0
        _x = _v19
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v20 = _v18.c1
        _x = _v20
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v21 = _v18.c2
        _x = _v21
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v22 = val1.translation
        _x = _v22
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.robotModel.limbs.append(val1)
      _x = self
      start = end
      end += 73
      (_x.robotModel.centerOfMass.x, _x.robotModel.centerOfMass.y, _x.robotModel.centerOfMass.z, _x.robotModel.totalMass, _x.torsoMatrix.offset.rotation.c0.x, _x.torsoMatrix.offset.rotation.c0.y, _x.torsoMatrix.offset.rotation.c0.z, _x.torsoMatrix.offset.rotation.c1.x, _x.torsoMatrix.offset.rotation.c1.y, _x.torsoMatrix.offset.rotation.c1.z, _x.torsoMatrix.offset.rotation.c2.x, _x.torsoMatrix.offset.rotation.c2.y, _x.torsoMatrix.offset.rotation.c2.z, _x.torsoMatrix.offset.translation.x, _x.torsoMatrix.offset.translation.y, _x.torsoMatrix.offset.translation.z, _x.torsoMatrix.isValid, _x.cont,) = _struct_16fBQ.unpack(str[start:end])
      self.torsoMatrix.isValid = bool(self.torsoMatrix.isValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f5B.pack(_x.bikeEngineOutput.odometryOffset.rotation, _x.bikeEngineOutput.odometryOffset.translation.x, _x.bikeEngineOutput.odometryOffset.translation.y, _x.bikeEngineOutput.isLeavingPossible, _x.bikeEngineOutput.executedBikeRequest.mirror, _x.bikeEngineOutput.executedBikeRequest.dynamical, _x.bikeEngineOutput.executedBikeRequest.ballSpecial, _x.bikeEngineOutput.executedBikeRequest.bMotionType))
      for val1 in self.bikeEngineOutput.executedBikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v23 = val1.translation
        _x = _v23
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v24 = val1.angle
        _x = _v24
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v25 = val1.odometryOffset
        _x = _v25
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_Qf3Bf.pack(_x.cognitionFrameInfo.time, _x.cognitionFrameInfo.cycleTime, _x.fallDownState.state, _x.fallDownState.direction, _x.fallDownState.sidewards, _x.fallDownState.odometryRotationOffset))
      _x = self.filteredJointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.filteredJointData.timeStamp, _x.filteredJointData.cycleTime))
      _x = self.filteredJointDataPrev.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.filteredJointDataPrev.timeStamp, _x.filteredJointDataPrev.cycleTime))
      buff.write(self.filteredSensorData.data.tostring())
      buff.write(self.filteredSensorData.currents.tostring())
      _x = self.filteredSensorData.temperatures
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_3I3B2f2B.pack(_x.filteredSensorData.timeStamp, _x.filteredSensorData.usActuatorMode, _x.filteredSensorData.usTimeStamp, _x.groundContactState.contactSafe, _x.groundContactState.contact, _x.groundContactState.noContactSafe, _x.headJointRequest.tilt, _x.headJointRequest.pan, _x.headJointRequest.reachable, _x.headJointRequest.moving))
      _x = self.jointRequest.jointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.jointRequest.jointData.timeStamp, _x.jointRequest.jointData.cycleTime))
      buff.write(self.jointRequest.jointHardness.hardness.tostring())
      buff.write(self.keyStates.pressed.tostring())
      _x = self
      buff.write(_struct_3BI6f2BI4f4B.pack(_x.motionInfo.motionRequest.motion, _x.motionInfo.motionRequest.specialActionRequest.specialAction, _x.motionInfo.motionRequest.specialActionRequest.mirror, _x.motionInfo.motionRequest.walkRequest.mode, _x.motionInfo.motionRequest.walkRequest.speed.rotation, _x.motionInfo.motionRequest.walkRequest.speed.translation.x, _x.motionInfo.motionRequest.walkRequest.speed.translation.y, _x.motionInfo.motionRequest.walkRequest.target.rotation, _x.motionInfo.motionRequest.walkRequest.target.translation.x, _x.motionInfo.motionRequest.walkRequest.target.translation.y, _x.motionInfo.motionRequest.walkRequest.pedantic, _x.motionInfo.motionRequest.walkRequest.dribbling, _x.motionInfo.motionRequest.walkRequest.kickType, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.x, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.y, _x.motionInfo.motionRequest.walkRequest.kickTarget.x, _x.motionInfo.motionRequest.walkRequest.kickTarget.y, _x.motionInfo.motionRequest.bikeRequest.mirror, _x.motionInfo.motionRequest.bikeRequest.dynamical, _x.motionInfo.motionRequest.bikeRequest.ballSpecial, _x.motionInfo.motionRequest.bikeRequest.bMotionType))
      for val1 in self.motionInfo.motionRequest.bikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v26 = val1.translation
        _x = _v26
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v27 = val1.angle
        _x = _v27
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v28 = val1.odometryOffset
        _x = _v28
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_B3fB4f.pack(_x.motionInfo.isMotionStable, _x.motionInfo.upcomingOdometryOffset.rotation, _x.motionInfo.upcomingOdometryOffset.translation.x, _x.motionInfo.upcomingOdometryOffset.translation.y, _x.motionInfo.upcomingOdometryOffsetValid, _x.motionRobotHealth.motionFrameRate, _x.odometryData.pose2D.rotation, _x.odometryData.pose2D.translation.x, _x.odometryData.pose2D.translation.y))
      for val1 in self.robotModel.limbs:
        _v29 = val1.rotation
        _v30 = _v29.c0
        _x = _v30
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v31 = _v29.c1
        _x = _v31
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v32 = _v29.c2
        _x = _v32
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v33 = val1.translation
        _x = _v33
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_16fBQ.pack(_x.robotModel.centerOfMass.x, _x.robotModel.centerOfMass.y, _x.robotModel.centerOfMass.z, _x.robotModel.totalMass, _x.torsoMatrix.offset.rotation.c0.x, _x.torsoMatrix.offset.rotation.c0.y, _x.torsoMatrix.offset.rotation.c0.z, _x.torsoMatrix.offset.rotation.c1.x, _x.torsoMatrix.offset.rotation.c1.y, _x.torsoMatrix.offset.rotation.c1.z, _x.torsoMatrix.offset.rotation.c2.x, _x.torsoMatrix.offset.rotation.c2.y, _x.torsoMatrix.offset.rotation.c2.z, _x.torsoMatrix.offset.translation.x, _x.torsoMatrix.offset.translation.y, _x.torsoMatrix.offset.translation.z, _x.torsoMatrix.isValid, _x.cont))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bikeEngineOutput is None:
        self.bikeEngineOutput = bh_motion.msg.BikeEngineOutput()
      if self.cognitionFrameInfo is None:
        self.cognitionFrameInfo = bh_motion.msg.CognitionFrameInfo()
      if self.fallDownState is None:
        self.fallDownState = bh_motion.msg.FallDownState()
      if self.filteredJointData is None:
        self.filteredJointData = bh_motion.msg.JointData()
      if self.filteredJointDataPrev is None:
        self.filteredJointDataPrev = bh_motion.msg.JointData()
      if self.filteredSensorData is None:
        self.filteredSensorData = bh_motion.msg.SensorData()
      if self.groundContactState is None:
        self.groundContactState = bh_motion.msg.GroundContactState()
      if self.headJointRequest is None:
        self.headJointRequest = bh_motion.msg.HeadJointRequest()
      if self.jointRequest is None:
        self.jointRequest = bh_motion.msg.JointRequest()
      if self.keyStates is None:
        self.keyStates = bh_motion.msg.KeyStates()
      if self.motionInfo is None:
        self.motionInfo = bh_motion.msg.MotionInfo()
      if self.motionRobotHealth is None:
        self.motionRobotHealth = bh_motion.msg.MotionRobotHealth()
      if self.odometryData is None:
        self.odometryData = bh_motion.msg.OdometryData()
      if self.robotModel is None:
        self.robotModel = bh_motion.msg.RobotModel()
      if self.torsoMatrix is None:
        self.torsoMatrix = bh_motion.msg.TorsoMatrix()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bikeEngineOutput.odometryOffset.rotation, _x.bikeEngineOutput.odometryOffset.translation.x, _x.bikeEngineOutput.odometryOffset.translation.y, _x.bikeEngineOutput.isLeavingPossible, _x.bikeEngineOutput.executedBikeRequest.mirror, _x.bikeEngineOutput.executedBikeRequest.dynamical, _x.bikeEngineOutput.executedBikeRequest.ballSpecial, _x.bikeEngineOutput.executedBikeRequest.bMotionType,) = _struct_3f5B.unpack(str[start:end])
      self.bikeEngineOutput.isLeavingPossible = bool(self.bikeEngineOutput.isLeavingPossible)
      self.bikeEngineOutput.executedBikeRequest.mirror = bool(self.bikeEngineOutput.executedBikeRequest.mirror)
      self.bikeEngineOutput.executedBikeRequest.dynamical = bool(self.bikeEngineOutput.executedBikeRequest.dynamical)
      self.bikeEngineOutput.executedBikeRequest.ballSpecial = bool(self.bikeEngineOutput.executedBikeRequest.ballSpecial)
      self.bikeEngineOutput.executedBikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v34 = val1.translation
        _x = _v34
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v35 = val1.angle
        _x = _v35
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v36 = val1.odometryOffset
        _x = _v36
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.bikeEngineOutput.executedBikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 19
      (_x.cognitionFrameInfo.time, _x.cognitionFrameInfo.cycleTime, _x.fallDownState.state, _x.fallDownState.direction, _x.fallDownState.sidewards, _x.fallDownState.odometryRotationOffset,) = _struct_Qf3Bf.unpack(str[start:end])
      start = end
      end += 22
      self.filteredJointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filteredJointData.timeStamp, _x.filteredJointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 22
      self.filteredJointDataPrev.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.filteredJointDataPrev.timeStamp, _x.filteredJointDataPrev.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 76
      self.filteredSensorData.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=19)
      start = end
      end += 44
      self.filteredSensorData.currents = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=22)
      start = end
      end += 22
      self.filteredSensorData.temperatures = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.filteredSensorData.timeStamp, _x.filteredSensorData.usActuatorMode, _x.filteredSensorData.usTimeStamp, _x.groundContactState.contactSafe, _x.groundContactState.contact, _x.groundContactState.noContactSafe, _x.headJointRequest.tilt, _x.headJointRequest.pan, _x.headJointRequest.reachable, _x.headJointRequest.moving,) = _struct_3I3B2f2B.unpack(str[start:end])
      self.groundContactState.contactSafe = bool(self.groundContactState.contactSafe)
      self.groundContactState.contact = bool(self.groundContactState.contact)
      self.groundContactState.noContactSafe = bool(self.groundContactState.noContactSafe)
      self.headJointRequest.reachable = bool(self.headJointRequest.reachable)
      self.headJointRequest.moving = bool(self.headJointRequest.moving)
      start = end
      end += 22
      self.jointRequest.jointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.jointRequest.jointData.timeStamp, _x.jointRequest.jointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 88
      self.jointRequest.jointHardness.hardness = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=22)
      start = end
      end += 5
      self.keyStates.pressed = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=5)
      self.keyStates.pressed = map(bool, self.keyStates.pressed)
      _x = self
      start = end
      end += 57
      (_x.motionInfo.motionRequest.motion, _x.motionInfo.motionRequest.specialActionRequest.specialAction, _x.motionInfo.motionRequest.specialActionRequest.mirror, _x.motionInfo.motionRequest.walkRequest.mode, _x.motionInfo.motionRequest.walkRequest.speed.rotation, _x.motionInfo.motionRequest.walkRequest.speed.translation.x, _x.motionInfo.motionRequest.walkRequest.speed.translation.y, _x.motionInfo.motionRequest.walkRequest.target.rotation, _x.motionInfo.motionRequest.walkRequest.target.translation.x, _x.motionInfo.motionRequest.walkRequest.target.translation.y, _x.motionInfo.motionRequest.walkRequest.pedantic, _x.motionInfo.motionRequest.walkRequest.dribbling, _x.motionInfo.motionRequest.walkRequest.kickType, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.x, _x.motionInfo.motionRequest.walkRequest.kickBallPosition.y, _x.motionInfo.motionRequest.walkRequest.kickTarget.x, _x.motionInfo.motionRequest.walkRequest.kickTarget.y, _x.motionInfo.motionRequest.bikeRequest.mirror, _x.motionInfo.motionRequest.bikeRequest.dynamical, _x.motionInfo.motionRequest.bikeRequest.ballSpecial, _x.motionInfo.motionRequest.bikeRequest.bMotionType,) = _struct_3BI6f2BI4f4B.unpack(str[start:end])
      self.motionInfo.motionRequest.specialActionRequest.mirror = bool(self.motionInfo.motionRequest.specialActionRequest.mirror)
      self.motionInfo.motionRequest.walkRequest.pedantic = bool(self.motionInfo.motionRequest.walkRequest.pedantic)
      self.motionInfo.motionRequest.walkRequest.dribbling = bool(self.motionInfo.motionRequest.walkRequest.dribbling)
      self.motionInfo.motionRequest.bikeRequest.mirror = bool(self.motionInfo.motionRequest.bikeRequest.mirror)
      self.motionInfo.motionRequest.bikeRequest.dynamical = bool(self.motionInfo.motionRequest.bikeRequest.dynamical)
      self.motionInfo.motionRequest.bikeRequest.ballSpecial = bool(self.motionInfo.motionRequest.bikeRequest.ballSpecial)
      self.motionInfo.motionRequest.bikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v37 = val1.translation
        _x = _v37
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v38 = val1.angle
        _x = _v38
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v39 = val1.odometryOffset
        _x = _v39
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.motionInfo.motionRequest.bikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 30
      (_x.motionInfo.isMotionStable, _x.motionInfo.upcomingOdometryOffset.rotation, _x.motionInfo.upcomingOdometryOffset.translation.x, _x.motionInfo.upcomingOdometryOffset.translation.y, _x.motionInfo.upcomingOdometryOffsetValid, _x.motionRobotHealth.motionFrameRate, _x.odometryData.pose2D.rotation, _x.odometryData.pose2D.translation.x, _x.odometryData.pose2D.translation.y,) = _struct_B3fB4f.unpack(str[start:end])
      self.motionInfo.isMotionStable = bool(self.motionInfo.isMotionStable)
      self.motionInfo.upcomingOdometryOffsetValid = bool(self.motionInfo.upcomingOdometryOffsetValid)
      self.robotModel.limbs = []
      for i in range(0, 23):
        val1 = bh_motion.msg.Pose3D()
        _v40 = val1.rotation
        _v41 = _v40.c0
        _x = _v41
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v42 = _v40.c1
        _x = _v42
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v43 = _v40.c2
        _x = _v43
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v44 = val1.translation
        _x = _v44
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.robotModel.limbs.append(val1)
      _x = self
      start = end
      end += 73
      (_x.robotModel.centerOfMass.x, _x.robotModel.centerOfMass.y, _x.robotModel.centerOfMass.z, _x.robotModel.totalMass, _x.torsoMatrix.offset.rotation.c0.x, _x.torsoMatrix.offset.rotation.c0.y, _x.torsoMatrix.offset.rotation.c0.z, _x.torsoMatrix.offset.rotation.c1.x, _x.torsoMatrix.offset.rotation.c1.y, _x.torsoMatrix.offset.rotation.c1.z, _x.torsoMatrix.offset.rotation.c2.x, _x.torsoMatrix.offset.rotation.c2.y, _x.torsoMatrix.offset.rotation.c2.z, _x.torsoMatrix.offset.translation.x, _x.torsoMatrix.offset.translation.y, _x.torsoMatrix.offset.translation.z, _x.torsoMatrix.isValid, _x.cont,) = _struct_16fBQ.unpack(str[start:end])
      self.torsoMatrix.isValid = bool(self.torsoMatrix.isValid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3BI6f2BI4f4B = struct.Struct("<3BI6f2BI4f4B")
_struct_22i = struct.Struct("<22i")
_struct_22h = struct.Struct("<22h")
_struct_3I3B2f2B = struct.Struct("<3I3B2f2B")
_struct_22B = struct.Struct("<22B")
_struct_B3fB4f = struct.Struct("<B3fB4f")
_struct_Qf3Bf = struct.Struct("<Qf3Bf")
_struct_3I = struct.Struct("<3I")
_struct_16fBQ = struct.Struct("<16fBQ")
_struct_5B = struct.Struct("<5B")
_struct_19f = struct.Struct("<19f")
_struct_22s = struct.Struct("<22s")
_struct_3f = struct.Struct("<3f")
_struct_3f5B = struct.Struct("<3f5B")
_struct_If = struct.Struct("<If")
