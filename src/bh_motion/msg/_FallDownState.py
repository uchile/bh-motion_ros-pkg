"""autogenerated by genpy from bh_motion/FallDownState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FallDownState(genpy.Message):
  _md5sum = "fb6008337c7623c3f44252e37b1b3a34"
  _type = "bh_motion/FallDownState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#/** Current state of the robot's body. */
uint8 state #  ENUM(State: undefined, upright, onGround, staggering, falling);

#/** The robot is falling / fell into this direction. */
uint8 direction  # ENUM(Direction: none, front, left, back, right );

#/** Did the robot fell sidewards before? */
uint8 sidewards #ENUM(Sidestate: noot, /* since "not" is already a keyword...*/, leftwards, rightwards, fallen /* robot did not get up since last sideward fall */);

float32 odometryRotationOffset

"""
  __slots__ = ['state','direction','sidewards','odometryRotationOffset']
  _slot_types = ['uint8','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,direction,sidewards,odometryRotationOffset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FallDownState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.direction is None:
        self.direction = 0
      if self.sidewards is None:
        self.sidewards = 0
      if self.odometryRotationOffset is None:
        self.odometryRotationOffset = 0.
    else:
      self.state = 0
      self.direction = 0
      self.sidewards = 0
      self.odometryRotationOffset = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3Bf.pack(_x.state, _x.direction, _x.sidewards, _x.odometryRotationOffset))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.state, _x.direction, _x.sidewards, _x.odometryRotationOffset,) = _struct_3Bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3Bf.pack(_x.state, _x.direction, _x.sidewards, _x.odometryRotationOffset))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.state, _x.direction, _x.sidewards, _x.odometryRotationOffset,) = _struct_3Bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3Bf = struct.Struct("<3Bf")
