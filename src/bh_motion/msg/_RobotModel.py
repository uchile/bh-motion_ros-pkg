"""autogenerated by genpy from bh_motion/RobotModel.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class RobotModel(genpy.Message):
  _md5sum = "3bf8c0e4a75305466ecc6183d6f56b3e"
  _type = "bh_motion/RobotModel"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pose3D[23] limbs #/**< Coordinate frame of the limbs of the robot relative to the robot's origin. */
Vector3 centerOfMass # /**< Position of the center of mass (center of gravity) relative to the robot's origin. 
float32 totalMass  # /**< The mass of the robot. */


================================================================================
MSG: bh_motion/Pose3D
RotationMatrix rotation

#/** translation as a Vector3*/
Vector3 translation

================================================================================
MSG: bh_motion/RotationMatrix
#  * \param  c0  the first column of the matrix.
#  * \param  c1  the second column of the matrix.
#  * \param  c2  the third column of the matrix.

Vector3 c0
Vector3 c1
Vector3 c2



================================================================================
MSG: bh_motion/Vector3
float32 x 
float32 y
float32 z

"""
  __slots__ = ['limbs','centerOfMass','totalMass']
  _slot_types = ['bh_motion/Pose3D[23]','bh_motion/Vector3','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       limbs,centerOfMass,totalMass

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotModel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.limbs is None:
        self.limbs = [bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D()]
      if self.centerOfMass is None:
        self.centerOfMass = bh_motion.msg.Vector3()
      if self.totalMass is None:
        self.totalMass = 0.
    else:
      self.limbs = [bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D(),bh_motion.msg.Pose3D()]
      self.centerOfMass = bh_motion.msg.Vector3()
      self.totalMass = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.limbs:
        _v1 = val1.rotation
        _v2 = _v1.c0
        _x = _v2
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.c1
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v4 = _v1.c2
        _x = _v4
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v5 = val1.translation
        _x = _v5
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_4f.pack(_x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z, _x.totalMass))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.limbs is None:
        self.limbs = None
      if self.centerOfMass is None:
        self.centerOfMass = bh_motion.msg.Vector3()
      end = 0
      self.limbs = []
      for i in range(0, 23):
        val1 = bh_motion.msg.Pose3D()
        _v6 = val1.rotation
        _v7 = _v6.c0
        _x = _v7
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v8 = _v6.c1
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v9 = _v6.c2
        _x = _v9
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v10 = val1.translation
        _x = _v10
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.limbs.append(val1)
      _x = self
      start = end
      end += 16
      (_x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z, _x.totalMass,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.limbs:
        _v11 = val1.rotation
        _v12 = _v11.c0
        _x = _v12
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v13 = _v11.c1
        _x = _v13
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v14 = _v11.c2
        _x = _v14
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v15 = val1.translation
        _x = _v15
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_4f.pack(_x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z, _x.totalMass))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.limbs is None:
        self.limbs = None
      if self.centerOfMass is None:
        self.centerOfMass = bh_motion.msg.Vector3()
      end = 0
      self.limbs = []
      for i in range(0, 23):
        val1 = bh_motion.msg.Pose3D()
        _v16 = val1.rotation
        _v17 = _v16.c0
        _x = _v17
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v18 = _v16.c1
        _x = _v18
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v19 = _v16.c2
        _x = _v19
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v20 = val1.translation
        _x = _v20
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.limbs.append(val1)
      _x = self
      start = end
      end += 16
      (_x.centerOfMass.x, _x.centerOfMass.y, _x.centerOfMass.z, _x.totalMass,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_3f = struct.Struct("<3f")
