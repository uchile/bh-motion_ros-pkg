"""autogenerated by genpy from bh_motion/WalkRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class WalkRequest(genpy.Message):
  _md5sum = "1f8e14a4f024f8e431c6351fb9f7d40f"
  _type = "bh_motion/WalkRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This expresses a walk request.


#(ENUM(Mode: speedMode, /**< Interpret \c speed as absolute walking speed and ignore \c target. */
#    percentageSpeedMode, /**< Interpret \c speed as percentage walking speed and ignore \c target. */
#    targetMode /**< Use \c target as walking target relative to the current position of the robot and interpret \c speed as percentage walking speed. */);)

uint32 mode  #/**< The walking mode. */
Pose2D speed #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
Pose2D target #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
bool pedantic #/**< Allows to disable the step size stabilization. set it when precision is indispensable. */
bool dribbling

uint32 kickType
Vector2 kickBallPosition
Vector2 kickTarget

================================================================================
MSG: bh_motion/Pose2D
# This expresses a position and orientation on a 2D (rotation, transaltion.x, transation.y).

float32 rotation
Translation translation

================================================================================
MSG: bh_motion/Translation
# This expresses an x, y translation

float32 x
float32 y

================================================================================
MSG: bh_motion/Vector2
float32 x 
float32 y


"""
  __slots__ = ['mode','speed','target','pedantic','dribbling','kickType','kickBallPosition','kickTarget']
  _slot_types = ['uint32','bh_motion/Pose2D','bh_motion/Pose2D','bool','bool','uint32','bh_motion/Vector2','bh_motion/Vector2']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,speed,target,pedantic,dribbling,kickType,kickBallPosition,kickTarget

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = 0
      if self.speed is None:
        self.speed = bh_motion.msg.Pose2D()
      if self.target is None:
        self.target = bh_motion.msg.Pose2D()
      if self.pedantic is None:
        self.pedantic = False
      if self.dribbling is None:
        self.dribbling = False
      if self.kickType is None:
        self.kickType = 0
      if self.kickBallPosition is None:
        self.kickBallPosition = bh_motion.msg.Vector2()
      if self.kickTarget is None:
        self.kickTarget = bh_motion.msg.Vector2()
    else:
      self.mode = 0
      self.speed = bh_motion.msg.Pose2D()
      self.target = bh_motion.msg.Pose2D()
      self.pedantic = False
      self.dribbling = False
      self.kickType = 0
      self.kickBallPosition = bh_motion.msg.Vector2()
      self.kickTarget = bh_motion.msg.Vector2()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I6f2BI4f.pack(_x.mode, _x.speed.rotation, _x.speed.translation.x, _x.speed.translation.y, _x.target.rotation, _x.target.translation.x, _x.target.translation.y, _x.pedantic, _x.dribbling, _x.kickType, _x.kickBallPosition.x, _x.kickBallPosition.y, _x.kickTarget.x, _x.kickTarget.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.speed is None:
        self.speed = bh_motion.msg.Pose2D()
      if self.target is None:
        self.target = bh_motion.msg.Pose2D()
      if self.kickBallPosition is None:
        self.kickBallPosition = bh_motion.msg.Vector2()
      if self.kickTarget is None:
        self.kickTarget = bh_motion.msg.Vector2()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.mode, _x.speed.rotation, _x.speed.translation.x, _x.speed.translation.y, _x.target.rotation, _x.target.translation.x, _x.target.translation.y, _x.pedantic, _x.dribbling, _x.kickType, _x.kickBallPosition.x, _x.kickBallPosition.y, _x.kickTarget.x, _x.kickTarget.y,) = _struct_I6f2BI4f.unpack(str[start:end])
      self.pedantic = bool(self.pedantic)
      self.dribbling = bool(self.dribbling)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I6f2BI4f.pack(_x.mode, _x.speed.rotation, _x.speed.translation.x, _x.speed.translation.y, _x.target.rotation, _x.target.translation.x, _x.target.translation.y, _x.pedantic, _x.dribbling, _x.kickType, _x.kickBallPosition.x, _x.kickBallPosition.y, _x.kickTarget.x, _x.kickTarget.y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.speed is None:
        self.speed = bh_motion.msg.Pose2D()
      if self.target is None:
        self.target = bh_motion.msg.Pose2D()
      if self.kickBallPosition is None:
        self.kickBallPosition = bh_motion.msg.Vector2()
      if self.kickTarget is None:
        self.kickTarget = bh_motion.msg.Vector2()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.mode, _x.speed.rotation, _x.speed.translation.x, _x.speed.translation.y, _x.target.rotation, _x.target.translation.x, _x.target.translation.y, _x.pedantic, _x.dribbling, _x.kickType, _x.kickBallPosition.x, _x.kickBallPosition.y, _x.kickTarget.x, _x.kickTarget.y,) = _struct_I6f2BI4f.unpack(str[start:end])
      self.pedantic = bool(self.pedantic)
      self.dribbling = bool(self.dribbling)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I6f2BI4f = struct.Struct("<I6f2BI4f")
