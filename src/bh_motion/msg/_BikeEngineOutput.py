"""autogenerated by genpy from bh_motion/BikeEngineOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class BikeEngineOutput(genpy.Message):
  _md5sum = "67ad1c06117ba96951059a1010ace3b8"
  _type = "bh_motion/BikeEngineOutput"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Pose2D odometryOffset   # /**< The body motion performed in this step. */
bool isLeavingPossible   # /**< Is leaving the motion module possible now? */
BikeRequest executedBikeRequest  # /**< The bike request that is currently in execution. */

================================================================================
MSG: bh_motion/Pose2D
# This expresses a position and orientation on a 2D (rotation, transaltion.x, transation.y).

float32 rotation
Translation translation

================================================================================
MSG: bh_motion/Translation
# This expresses an x, y translation

float32 x
float32 y

================================================================================
MSG: bh_motion/BikeRequest
bool mirror
bool dynamical
bool ballSpecial
uint8 bMotionType   # ENUM(BMotionID: kickForward, newKick, none)


DynPoint[2] dynPoints


================================================================================
MSG: bh_motion/DynPoint
uint32 limb
uint32 phaseNumber
uint32 duration
Vector3 translation
Vector3 angle
Vector3 odometryOffset

================================================================================
MSG: bh_motion/Vector3
float32 x 
float32 y
float32 z

"""
  __slots__ = ['odometryOffset','isLeavingPossible','executedBikeRequest']
  _slot_types = ['bh_motion/Pose2D','bool','bh_motion/BikeRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       odometryOffset,isLeavingPossible,executedBikeRequest

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BikeEngineOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.odometryOffset is None:
        self.odometryOffset = bh_motion.msg.Pose2D()
      if self.isLeavingPossible is None:
        self.isLeavingPossible = False
      if self.executedBikeRequest is None:
        self.executedBikeRequest = bh_motion.msg.BikeRequest()
    else:
      self.odometryOffset = bh_motion.msg.Pose2D()
      self.isLeavingPossible = False
      self.executedBikeRequest = bh_motion.msg.BikeRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f5B.pack(_x.odometryOffset.rotation, _x.odometryOffset.translation.x, _x.odometryOffset.translation.y, _x.isLeavingPossible, _x.executedBikeRequest.mirror, _x.executedBikeRequest.dynamical, _x.executedBikeRequest.ballSpecial, _x.executedBikeRequest.bMotionType))
      for val1 in self.executedBikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v2 = val1.angle
        _x = _v2
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v3 = val1.odometryOffset
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.odometryOffset is None:
        self.odometryOffset = bh_motion.msg.Pose2D()
      if self.executedBikeRequest is None:
        self.executedBikeRequest = bh_motion.msg.BikeRequest()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.odometryOffset.rotation, _x.odometryOffset.translation.x, _x.odometryOffset.translation.y, _x.isLeavingPossible, _x.executedBikeRequest.mirror, _x.executedBikeRequest.dynamical, _x.executedBikeRequest.ballSpecial, _x.executedBikeRequest.bMotionType,) = _struct_3f5B.unpack(str[start:end])
      self.isLeavingPossible = bool(self.isLeavingPossible)
      self.executedBikeRequest.mirror = bool(self.executedBikeRequest.mirror)
      self.executedBikeRequest.dynamical = bool(self.executedBikeRequest.dynamical)
      self.executedBikeRequest.ballSpecial = bool(self.executedBikeRequest.ballSpecial)
      self.executedBikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v4 = val1.translation
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v5 = val1.angle
        _x = _v5
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v6 = val1.odometryOffset
        _x = _v6
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.executedBikeRequest.dynPoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f5B.pack(_x.odometryOffset.rotation, _x.odometryOffset.translation.x, _x.odometryOffset.translation.y, _x.isLeavingPossible, _x.executedBikeRequest.mirror, _x.executedBikeRequest.dynamical, _x.executedBikeRequest.ballSpecial, _x.executedBikeRequest.bMotionType))
      for val1 in self.executedBikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v7 = val1.translation
        _x = _v7
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v8 = val1.angle
        _x = _v8
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v9 = val1.odometryOffset
        _x = _v9
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.odometryOffset is None:
        self.odometryOffset = bh_motion.msg.Pose2D()
      if self.executedBikeRequest is None:
        self.executedBikeRequest = bh_motion.msg.BikeRequest()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.odometryOffset.rotation, _x.odometryOffset.translation.x, _x.odometryOffset.translation.y, _x.isLeavingPossible, _x.executedBikeRequest.mirror, _x.executedBikeRequest.dynamical, _x.executedBikeRequest.ballSpecial, _x.executedBikeRequest.bMotionType,) = _struct_3f5B.unpack(str[start:end])
      self.isLeavingPossible = bool(self.isLeavingPossible)
      self.executedBikeRequest.mirror = bool(self.executedBikeRequest.mirror)
      self.executedBikeRequest.dynamical = bool(self.executedBikeRequest.dynamical)
      self.executedBikeRequest.ballSpecial = bool(self.executedBikeRequest.ballSpecial)
      self.executedBikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v10 = val1.translation
        _x = _v10
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v11 = val1.angle
        _x = _v11
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v12 = val1.odometryOffset
        _x = _v12
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.executedBikeRequest.dynPoints.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3f = struct.Struct("<3f")
_struct_3f5B = struct.Struct("<3f5B")
