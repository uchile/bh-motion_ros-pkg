"""autogenerated by genpy from bh_motion/JointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class JointRequest(genpy.Message):
  _md5sum = "13af7c3fe6b150009a7a8bfb7069695d"
  _type = "bh_motion/JointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """JointData jointData
HardnessData jointHardness

================================================================================
MSG: bh_motion/JointData
uint8[22] angles #numOfJoints
uint32 timeStamp
float32 cycleTime

================================================================================
MSG: bh_motion/HardnessData
int32[22] hardness #numOfJoints

"""
  __slots__ = ['jointData','jointHardness']
  _slot_types = ['bh_motion/JointData','bh_motion/HardnessData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       jointData,jointHardness

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.jointData is None:
        self.jointData = bh_motion.msg.JointData()
      if self.jointHardness is None:
        self.jointHardness = bh_motion.msg.HardnessData()
    else:
      self.jointData = bh_motion.msg.JointData()
      self.jointHardness = bh_motion.msg.HardnessData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.jointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.jointData.timeStamp, _x.jointData.cycleTime))
      buff.write(_struct_22i.pack(*self.jointHardness.hardness))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.jointData is None:
        self.jointData = bh_motion.msg.JointData()
      if self.jointHardness is None:
        self.jointHardness = bh_motion.msg.HardnessData()
      end = 0
      start = end
      end += 22
      self.jointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.jointData.timeStamp, _x.jointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 88
      self.jointHardness.hardness = _struct_22i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.jointData.angles
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_22B.pack(*_x))
      else:
        buff.write(_struct_22s.pack(_x))
      _x = self
      buff.write(_struct_If.pack(_x.jointData.timeStamp, _x.jointData.cycleTime))
      buff.write(self.jointHardness.hardness.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.jointData is None:
        self.jointData = bh_motion.msg.JointData()
      if self.jointHardness is None:
        self.jointHardness = bh_motion.msg.HardnessData()
      end = 0
      start = end
      end += 22
      self.jointData.angles = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.jointData.timeStamp, _x.jointData.cycleTime,) = _struct_If.unpack(str[start:end])
      start = end
      end += 88
      self.jointHardness.hardness = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=22)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_22s = struct.Struct("<22s")
_struct_22B = struct.Struct("<22B")
_struct_22i = struct.Struct("<22i")
_struct_If = struct.Struct("<If")
