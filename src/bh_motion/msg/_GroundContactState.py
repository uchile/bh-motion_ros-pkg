"""autogenerated by genpy from bh_motion/GroundContactState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GroundContactState(genpy.Message):
  _md5sum = "f3d57ba2b14cf4ab6455fa7c7d5d5ec8"
  _type = "bh_motion/GroundContactState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool contactSafe   # /**< Whether we got contact with ground or not. */
bool contact
bool noContactSafe  # /** Whether we got no contact with ground or not */

"""
  __slots__ = ['contactSafe','contact','noContactSafe']
  _slot_types = ['bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contactSafe,contact,noContactSafe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GroundContactState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.contactSafe is None:
        self.contactSafe = False
      if self.contact is None:
        self.contact = False
      if self.noContactSafe is None:
        self.noContactSafe = False
    else:
      self.contactSafe = False
      self.contact = False
      self.noContactSafe = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.contactSafe, _x.contact, _x.noContactSafe))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.contactSafe, _x.contact, _x.noContactSafe,) = _struct_3B.unpack(str[start:end])
      self.contactSafe = bool(self.contactSafe)
      self.contact = bool(self.contact)
      self.noContactSafe = bool(self.noContactSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.contactSafe, _x.contact, _x.noContactSafe))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.contactSafe, _x.contact, _x.noContactSafe,) = _struct_3B.unpack(str[start:end])
      self.contactSafe = bool(self.contactSafe)
      self.contact = bool(self.contact)
      self.noContactSafe = bool(self.noContactSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
