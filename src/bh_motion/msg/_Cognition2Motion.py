"""autogenerated by genpy from bh_motion/Cognition2Motion.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bh_motion.msg

class Cognition2Motion(genpy.Message):
  _md5sum = "36693b8d4dad533f41d2dc297eab7c33"
  _type = "bh_motion/Cognition2Motion"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """DamageConfiguration damageConfiguration  #   //
HeadAngleRequest headAngleRequest   #         //cabeza
MotionRequest motionRequest  #             //motion
RobotInfo robotInfo  #                     //lo q esta haciendo
uint64 cont


================================================================================
MSG: bh_motion/DamageConfiguration
bool useGroundContactDetection
bool useGroundContactDetectionForLEDs
bool useGroundContactDetectionForSafeStates
bool useGroundContactDetectionForSensorCalibration

================================================================================
MSG: bh_motion/HeadAngleRequest
float32 pan        #  Head pan target angle in radians. */
float32 tilt       # Head tilt target angle in radians. */
float32 speed      # /**< Maximum joint speed to reach target angles in radians/s. */

================================================================================
MSG: bh_motion/MotionRequest
# This expresses a Motion request.

uint8 motion  # /**< The selected motion. ENUM(Motion: walk, bike, specialAction, stand);*/

SpecialActionRequest specialActionRequest # /**< The special action request, if it is the selected motion. */
WalkRequest walkRequest  # /**< The walk request, if it is the selected motion. */
BikeRequest bikeRequest  # /**< The kick request, if it is the selected motion. */


================================================================================
MSG: bh_motion/SpecialActionRequest
# This expresses a special action requests.

# ENUM(SpecialActionID: playDead, standUpBackNao, standUpFrontNao, sitDown, sitDownKeeper, goUp, keeperJumpLeftSign);

uint8 specialAction  #; /**< The special action selected. */
bool mirror          #; /**< Mirror left and right. */


# FALTA getSpecialActionFromName

================================================================================
MSG: bh_motion/WalkRequest
# This expresses a walk request.


#(ENUM(Mode: speedMode, /**< Interpret \c speed as absolute walking speed and ignore \c target. */
#    percentageSpeedMode, /**< Interpret \c speed as percentage walking speed and ignore \c target. */
#    targetMode /**< Use \c target as walking target relative to the current position of the robot and interpret \c speed as percentage walking speed. */);)

uint32 mode  #/**< The walking mode. */
Pose2D speed #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
Pose2D target #/**< Walking target, in mm and radians, relative to the robot. Use either a speed or a target. */
bool pedantic #/**< Allows to disable the step size stabilization. set it when precision is indispensable. */
bool dribbling

uint32 kickType
Vector2 kickBallPosition
Vector2 kickTarget

================================================================================
MSG: bh_motion/Pose2D
# This expresses a position and orientation on a 2D (rotation, transaltion.x, transation.y).

float32 rotation
Translation translation

================================================================================
MSG: bh_motion/Translation
# This expresses an x, y translation

float32 x
float32 y

================================================================================
MSG: bh_motion/Vector2
float32 x 
float32 y


================================================================================
MSG: bh_motion/BikeRequest
bool mirror
bool dynamical
bool ballSpecial
uint8 bMotionType   # ENUM(BMotionID: kickForward, newKick, none)


DynPoint[2] dynPoints


================================================================================
MSG: bh_motion/DynPoint
uint32 limb
uint32 phaseNumber
uint32 duration
Vector3 translation
Vector3 angle
Vector3 odometryOffset

================================================================================
MSG: bh_motion/Vector3
float32 x 
float32 y
float32 z

================================================================================
MSG: bh_motion/RobotInfo
uint16 penalty             #// penalty state of the player
uint16 secsTillUnpenalised # // estimate of time till unpenalised

"""
  __slots__ = ['damageConfiguration','headAngleRequest','motionRequest','robotInfo','cont']
  _slot_types = ['bh_motion/DamageConfiguration','bh_motion/HeadAngleRequest','bh_motion/MotionRequest','bh_motion/RobotInfo','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       damageConfiguration,headAngleRequest,motionRequest,robotInfo,cont

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cognition2Motion, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.damageConfiguration is None:
        self.damageConfiguration = bh_motion.msg.DamageConfiguration()
      if self.headAngleRequest is None:
        self.headAngleRequest = bh_motion.msg.HeadAngleRequest()
      if self.motionRequest is None:
        self.motionRequest = bh_motion.msg.MotionRequest()
      if self.robotInfo is None:
        self.robotInfo = bh_motion.msg.RobotInfo()
      if self.cont is None:
        self.cont = 0
    else:
      self.damageConfiguration = bh_motion.msg.DamageConfiguration()
      self.headAngleRequest = bh_motion.msg.HeadAngleRequest()
      self.motionRequest = bh_motion.msg.MotionRequest()
      self.robotInfo = bh_motion.msg.RobotInfo()
      self.cont = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B3f3BI6f2BI4f4B.pack(_x.damageConfiguration.useGroundContactDetection, _x.damageConfiguration.useGroundContactDetectionForLEDs, _x.damageConfiguration.useGroundContactDetectionForSafeStates, _x.damageConfiguration.useGroundContactDetectionForSensorCalibration, _x.headAngleRequest.pan, _x.headAngleRequest.tilt, _x.headAngleRequest.speed, _x.motionRequest.motion, _x.motionRequest.specialActionRequest.specialAction, _x.motionRequest.specialActionRequest.mirror, _x.motionRequest.walkRequest.mode, _x.motionRequest.walkRequest.speed.rotation, _x.motionRequest.walkRequest.speed.translation.x, _x.motionRequest.walkRequest.speed.translation.y, _x.motionRequest.walkRequest.target.rotation, _x.motionRequest.walkRequest.target.translation.x, _x.motionRequest.walkRequest.target.translation.y, _x.motionRequest.walkRequest.pedantic, _x.motionRequest.walkRequest.dribbling, _x.motionRequest.walkRequest.kickType, _x.motionRequest.walkRequest.kickBallPosition.x, _x.motionRequest.walkRequest.kickBallPosition.y, _x.motionRequest.walkRequest.kickTarget.x, _x.motionRequest.walkRequest.kickTarget.y, _x.motionRequest.bikeRequest.mirror, _x.motionRequest.bikeRequest.dynamical, _x.motionRequest.bikeRequest.ballSpecial, _x.motionRequest.bikeRequest.bMotionType))
      for val1 in self.motionRequest.bikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v2 = val1.angle
        _x = _v2
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v3 = val1.odometryOffset
        _x = _v3
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_2HQ.pack(_x.robotInfo.penalty, _x.robotInfo.secsTillUnpenalised, _x.cont))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.damageConfiguration is None:
        self.damageConfiguration = bh_motion.msg.DamageConfiguration()
      if self.headAngleRequest is None:
        self.headAngleRequest = bh_motion.msg.HeadAngleRequest()
      if self.motionRequest is None:
        self.motionRequest = bh_motion.msg.MotionRequest()
      if self.robotInfo is None:
        self.robotInfo = bh_motion.msg.RobotInfo()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.damageConfiguration.useGroundContactDetection, _x.damageConfiguration.useGroundContactDetectionForLEDs, _x.damageConfiguration.useGroundContactDetectionForSafeStates, _x.damageConfiguration.useGroundContactDetectionForSensorCalibration, _x.headAngleRequest.pan, _x.headAngleRequest.tilt, _x.headAngleRequest.speed, _x.motionRequest.motion, _x.motionRequest.specialActionRequest.specialAction, _x.motionRequest.specialActionRequest.mirror, _x.motionRequest.walkRequest.mode, _x.motionRequest.walkRequest.speed.rotation, _x.motionRequest.walkRequest.speed.translation.x, _x.motionRequest.walkRequest.speed.translation.y, _x.motionRequest.walkRequest.target.rotation, _x.motionRequest.walkRequest.target.translation.x, _x.motionRequest.walkRequest.target.translation.y, _x.motionRequest.walkRequest.pedantic, _x.motionRequest.walkRequest.dribbling, _x.motionRequest.walkRequest.kickType, _x.motionRequest.walkRequest.kickBallPosition.x, _x.motionRequest.walkRequest.kickBallPosition.y, _x.motionRequest.walkRequest.kickTarget.x, _x.motionRequest.walkRequest.kickTarget.y, _x.motionRequest.bikeRequest.mirror, _x.motionRequest.bikeRequest.dynamical, _x.motionRequest.bikeRequest.ballSpecial, _x.motionRequest.bikeRequest.bMotionType,) = _struct_4B3f3BI6f2BI4f4B.unpack(str[start:end])
      self.damageConfiguration.useGroundContactDetection = bool(self.damageConfiguration.useGroundContactDetection)
      self.damageConfiguration.useGroundContactDetectionForLEDs = bool(self.damageConfiguration.useGroundContactDetectionForLEDs)
      self.damageConfiguration.useGroundContactDetectionForSafeStates = bool(self.damageConfiguration.useGroundContactDetectionForSafeStates)
      self.damageConfiguration.useGroundContactDetectionForSensorCalibration = bool(self.damageConfiguration.useGroundContactDetectionForSensorCalibration)
      self.motionRequest.specialActionRequest.mirror = bool(self.motionRequest.specialActionRequest.mirror)
      self.motionRequest.walkRequest.pedantic = bool(self.motionRequest.walkRequest.pedantic)
      self.motionRequest.walkRequest.dribbling = bool(self.motionRequest.walkRequest.dribbling)
      self.motionRequest.bikeRequest.mirror = bool(self.motionRequest.bikeRequest.mirror)
      self.motionRequest.bikeRequest.dynamical = bool(self.motionRequest.bikeRequest.dynamical)
      self.motionRequest.bikeRequest.ballSpecial = bool(self.motionRequest.bikeRequest.ballSpecial)
      self.motionRequest.bikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v4 = val1.translation
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v5 = val1.angle
        _x = _v5
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v6 = val1.odometryOffset
        _x = _v6
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.motionRequest.bikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.robotInfo.penalty, _x.robotInfo.secsTillUnpenalised, _x.cont,) = _struct_2HQ.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B3f3BI6f2BI4f4B.pack(_x.damageConfiguration.useGroundContactDetection, _x.damageConfiguration.useGroundContactDetectionForLEDs, _x.damageConfiguration.useGroundContactDetectionForSafeStates, _x.damageConfiguration.useGroundContactDetectionForSensorCalibration, _x.headAngleRequest.pan, _x.headAngleRequest.tilt, _x.headAngleRequest.speed, _x.motionRequest.motion, _x.motionRequest.specialActionRequest.specialAction, _x.motionRequest.specialActionRequest.mirror, _x.motionRequest.walkRequest.mode, _x.motionRequest.walkRequest.speed.rotation, _x.motionRequest.walkRequest.speed.translation.x, _x.motionRequest.walkRequest.speed.translation.y, _x.motionRequest.walkRequest.target.rotation, _x.motionRequest.walkRequest.target.translation.x, _x.motionRequest.walkRequest.target.translation.y, _x.motionRequest.walkRequest.pedantic, _x.motionRequest.walkRequest.dribbling, _x.motionRequest.walkRequest.kickType, _x.motionRequest.walkRequest.kickBallPosition.x, _x.motionRequest.walkRequest.kickBallPosition.y, _x.motionRequest.walkRequest.kickTarget.x, _x.motionRequest.walkRequest.kickTarget.y, _x.motionRequest.bikeRequest.mirror, _x.motionRequest.bikeRequest.dynamical, _x.motionRequest.bikeRequest.ballSpecial, _x.motionRequest.bikeRequest.bMotionType))
      for val1 in self.motionRequest.bikeRequest.dynPoints:
        _x = val1
        buff.write(_struct_3I.pack(_x.limb, _x.phaseNumber, _x.duration))
        _v7 = val1.translation
        _x = _v7
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v8 = val1.angle
        _x = _v8
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v9 = val1.odometryOffset
        _x = _v9
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_2HQ.pack(_x.robotInfo.penalty, _x.robotInfo.secsTillUnpenalised, _x.cont))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.damageConfiguration is None:
        self.damageConfiguration = bh_motion.msg.DamageConfiguration()
      if self.headAngleRequest is None:
        self.headAngleRequest = bh_motion.msg.HeadAngleRequest()
      if self.motionRequest is None:
        self.motionRequest = bh_motion.msg.MotionRequest()
      if self.robotInfo is None:
        self.robotInfo = bh_motion.msg.RobotInfo()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.damageConfiguration.useGroundContactDetection, _x.damageConfiguration.useGroundContactDetectionForLEDs, _x.damageConfiguration.useGroundContactDetectionForSafeStates, _x.damageConfiguration.useGroundContactDetectionForSensorCalibration, _x.headAngleRequest.pan, _x.headAngleRequest.tilt, _x.headAngleRequest.speed, _x.motionRequest.motion, _x.motionRequest.specialActionRequest.specialAction, _x.motionRequest.specialActionRequest.mirror, _x.motionRequest.walkRequest.mode, _x.motionRequest.walkRequest.speed.rotation, _x.motionRequest.walkRequest.speed.translation.x, _x.motionRequest.walkRequest.speed.translation.y, _x.motionRequest.walkRequest.target.rotation, _x.motionRequest.walkRequest.target.translation.x, _x.motionRequest.walkRequest.target.translation.y, _x.motionRequest.walkRequest.pedantic, _x.motionRequest.walkRequest.dribbling, _x.motionRequest.walkRequest.kickType, _x.motionRequest.walkRequest.kickBallPosition.x, _x.motionRequest.walkRequest.kickBallPosition.y, _x.motionRequest.walkRequest.kickTarget.x, _x.motionRequest.walkRequest.kickTarget.y, _x.motionRequest.bikeRequest.mirror, _x.motionRequest.bikeRequest.dynamical, _x.motionRequest.bikeRequest.ballSpecial, _x.motionRequest.bikeRequest.bMotionType,) = _struct_4B3f3BI6f2BI4f4B.unpack(str[start:end])
      self.damageConfiguration.useGroundContactDetection = bool(self.damageConfiguration.useGroundContactDetection)
      self.damageConfiguration.useGroundContactDetectionForLEDs = bool(self.damageConfiguration.useGroundContactDetectionForLEDs)
      self.damageConfiguration.useGroundContactDetectionForSafeStates = bool(self.damageConfiguration.useGroundContactDetectionForSafeStates)
      self.damageConfiguration.useGroundContactDetectionForSensorCalibration = bool(self.damageConfiguration.useGroundContactDetectionForSensorCalibration)
      self.motionRequest.specialActionRequest.mirror = bool(self.motionRequest.specialActionRequest.mirror)
      self.motionRequest.walkRequest.pedantic = bool(self.motionRequest.walkRequest.pedantic)
      self.motionRequest.walkRequest.dribbling = bool(self.motionRequest.walkRequest.dribbling)
      self.motionRequest.bikeRequest.mirror = bool(self.motionRequest.bikeRequest.mirror)
      self.motionRequest.bikeRequest.dynamical = bool(self.motionRequest.bikeRequest.dynamical)
      self.motionRequest.bikeRequest.ballSpecial = bool(self.motionRequest.bikeRequest.ballSpecial)
      self.motionRequest.bikeRequest.dynPoints = []
      for i in range(0, 2):
        val1 = bh_motion.msg.DynPoint()
        _x = val1
        start = end
        end += 12
        (_x.limb, _x.phaseNumber, _x.duration,) = _struct_3I.unpack(str[start:end])
        _v10 = val1.translation
        _x = _v10
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v11 = val1.angle
        _x = _v11
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v12 = val1.odometryOffset
        _x = _v12
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.motionRequest.bikeRequest.dynPoints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.robotInfo.penalty, _x.robotInfo.secsTillUnpenalised, _x.cont,) = _struct_2HQ.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2HQ = struct.Struct("<2HQ")
_struct_3I = struct.Struct("<3I")
_struct_4B3f3BI6f2BI4f4B = struct.Struct("<4B3f3BI6f2BI4f4B")
_struct_3f = struct.Struct("<3f")
