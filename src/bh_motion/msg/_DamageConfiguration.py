"""autogenerated by genpy from bh_motion/DamageConfiguration.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DamageConfiguration(genpy.Message):
  _md5sum = "5765d6d2561b4b28941e4258193b1dc4"
  _type = "bh_motion/DamageConfiguration"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool useGroundContactDetection
bool useGroundContactDetectionForLEDs
bool useGroundContactDetectionForSafeStates
bool useGroundContactDetectionForSensorCalibration

"""
  __slots__ = ['useGroundContactDetection','useGroundContactDetectionForLEDs','useGroundContactDetectionForSafeStates','useGroundContactDetectionForSensorCalibration']
  _slot_types = ['bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       useGroundContactDetection,useGroundContactDetectionForLEDs,useGroundContactDetectionForSafeStates,useGroundContactDetectionForSensorCalibration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DamageConfiguration, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.useGroundContactDetection is None:
        self.useGroundContactDetection = False
      if self.useGroundContactDetectionForLEDs is None:
        self.useGroundContactDetectionForLEDs = False
      if self.useGroundContactDetectionForSafeStates is None:
        self.useGroundContactDetectionForSafeStates = False
      if self.useGroundContactDetectionForSensorCalibration is None:
        self.useGroundContactDetectionForSensorCalibration = False
    else:
      self.useGroundContactDetection = False
      self.useGroundContactDetectionForLEDs = False
      self.useGroundContactDetectionForSafeStates = False
      self.useGroundContactDetectionForSensorCalibration = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.useGroundContactDetection, _x.useGroundContactDetectionForLEDs, _x.useGroundContactDetectionForSafeStates, _x.useGroundContactDetectionForSensorCalibration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.useGroundContactDetection, _x.useGroundContactDetectionForLEDs, _x.useGroundContactDetectionForSafeStates, _x.useGroundContactDetectionForSensorCalibration,) = _struct_4B.unpack(str[start:end])
      self.useGroundContactDetection = bool(self.useGroundContactDetection)
      self.useGroundContactDetectionForLEDs = bool(self.useGroundContactDetectionForLEDs)
      self.useGroundContactDetectionForSafeStates = bool(self.useGroundContactDetectionForSafeStates)
      self.useGroundContactDetectionForSensorCalibration = bool(self.useGroundContactDetectionForSensorCalibration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.useGroundContactDetection, _x.useGroundContactDetectionForLEDs, _x.useGroundContactDetectionForSafeStates, _x.useGroundContactDetectionForSensorCalibration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.useGroundContactDetection, _x.useGroundContactDetectionForLEDs, _x.useGroundContactDetectionForSafeStates, _x.useGroundContactDetectionForSensorCalibration,) = _struct_4B.unpack(str[start:end])
      self.useGroundContactDetection = bool(self.useGroundContactDetection)
      self.useGroundContactDetectionForLEDs = bool(self.useGroundContactDetectionForLEDs)
      self.useGroundContactDetectionForSafeStates = bool(self.useGroundContactDetectionForSafeStates)
      self.useGroundContactDetectionForSensorCalibration = bool(self.useGroundContactDetectionForSensorCalibration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
